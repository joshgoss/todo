name: Deploy changes
on:
    push:
        branches:
            - main
env:
    REACT_APP_API_URL: ${{ secrets.API_URL }}
    TASK_DEFINITION_FILE: task-definition.json
jobs:
    deploy_backend:
        name: "Build and Push to ECR"
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./backend
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPO }}:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/${{ secrets.ECR_REPO }}:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPO }}:$IMAGE_TAG  " >> $GITHUB_OUTPUT

            - name: Download task definition
              id: download-task-def
              run: |
                  aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} --query taskDefinition >> ${{ env.TASK_DEFINITION_FILE }}
                  echo "ORIG_TASK_DEF=$(cat ${{env.TASK_DEFINITION_FILE}})" >> $GITHUB_ENV

            - shell: bash
              run: |
                  echo "${{ steps.download-task-def.outputs.ORIG_TASK_DEF}}" > ${{ env.TASK_DEFINITION_FILE }}

            - name: Upload original task definition
              uses: actions/upload-artifact@v3
              with:
                  name: orig-task-def
                  path: ${{ env.TASK_DEFINITION_FILE }}
            - name: Download original task definition
              uses: actions/download-artifact@v3
              with:
                  name: orig-task-def
            - name: Fill in the new image ID in the Amazon ECS task definition
              id: new-task-def
              uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
              with:
                  task-definition: ${{ env.TASK_DEFINITION_FILE }}
                  container-name: ${{ secrets.ECS_CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
              with:
                  task-definition: ${{ steps.new-task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true
